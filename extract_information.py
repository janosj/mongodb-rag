from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.document_loaders import DirectoryLoader
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param
import logging

client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# Define the text embedding model
embeddings = OpenAIEmbeddings(openai_api_key=key_param.openai_api_key)

# Initialize the Vector Store
vectorStore = MongoDBAtlasVectorSearch( collection, embeddings )


# Processes the query and returns 3 distinct answers:
# - An answer derived without any internal data (context)
# - An answer derived from Vector Search alone
# - An answer derived from an LLM with context provided by Vector Search (RAG)
def query_data(query):

    logging.warning('Running query with...')
    logging.warning(query)
    
    # Convert question to vector using OpenAI embeddings
    # Perform Atlas Vector Search using Langchain's vectorStore
    # similarity_search returns MongoDB documents most similar to the query    

    docs = vectorStore.similarity_search(query, K=1)

    # JJ: added code here.
    if not docs:
         # If something is amiss, nothing comes back.
         # This gets you past that (and it moves on to the RAG query).
         # In my case, the name of my vector search index was not "default".
         # Turns out it was interesting to see the RAG results without having an index!
         vs_output = "No results (check vector index?)"
    else:
         vs_output = docs[0].page_content

    # Leveraging Atlas Vector Search paired with Langchain's QARetriever

    # Define the LLM that we want to use -- note that this is the Language Generation Model and NOT an Embedding Model
    # If it's not specified (for example like in the code below),
    # then the default OpenAI model used in LangChain is OpenAI GPT-3.5-turbo, as of August 30, 2023
    
    llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)

    # Get VectorStoreRetriever: Specifically, Retriever for MongoDB VectorStore.
    # Implements _get_relevant_documents which retrieves documents relevant to a query.
    retriever = vectorStore.as_retriever()

    # Load "stuff" documents chain. Stuff documents chain takes a list of documents,
    # inserts them all into a prompt and passes that prompt to an LLM.
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)

    # Execute the chain
    retriever_output = qa.run(query)

    # Results if you don't use Vector Search
    straightLLM_output = llm(query)

    # Return the three outputs (Vector Search, VS + LLM (RAG), and LLM only)
    return vs_output, retriever_output, straightLLM_output

# Create a web interface for the app, using Gradio

with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """)

    gr.Markdown(
        """
        Sample questions:
        - Did any error occur on August 16th? If yes, then what was the error caused by?
        - What questions did Alfred ask? What were Bruce's answers? Please summarize in bullet points.
        - What was the overall sentiment of Alfred's chat with Bruce? What was the likely CSAT?
        """)
 
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():

        responseNoVS = gr.Textbox(lines=1, max_lines=10, label="Output generated by LLM without any context (i.e. without any internal data):")

        responseVS = gr.Textbox(lines=1, max_lines=10, label="Output from Atlas Vector Search alone. Vector Search finds the relevant internal data:")

        responseVSandLLM = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM. RetrievalQA is a chain in LangChain that retrieves relevant documents from an external source (e.g. a vector database) and uses the language model to generate an answer based on those documents.")

    # Call query_data function when user clicks Submit
    button.click(query_data, textbox, outputs=[responseVS, responseVSandLLM, responseNoVS])

demo.launch()
